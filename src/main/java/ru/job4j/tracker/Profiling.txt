Для профилирования использовался утилита jconsole:


==== Без нагрузочного тестирования ===

1. Heap Memory Usage - показатель менялся от стартового значения в 13 мб, то максимального в 28 мб.
После запуска GC показатель снижался до 4 и 6 мб.
Прирост в основном связан с выполнением основного функционала - создание заявок, вывод их на экран, редактирования.
Не наблюдается каких то утечек памяти.

2. Classes - за память минут работы программы было загружено 2 393 класса и затем в течение последующих 10 минут цифра не изменялся.
В течение первых 5 минут был запущен каждый пункт трекера, проверена работоспособность.

3. Threads - в первые 5 минут работы программы наблюдался прирост нитей до 16 единиц. Затем все последующие 10 минут = 14.

4. CPU - максимальная нагрузка на CPU составила 1.0%.


=== С нагрузочным тестированием ===

Работа программа длилась порядка 5 минут. Перед демонстрацией меню пользователю, программа создала в памяти 10 000 000 заявок.

1. Heap Memory Usage - после создания 10 млн. заявок куча была загружена на 1.8 Гб.
3 итерацию создания 10 млн. заявок приложение не смогло осуществить, было выброшено исключение OutOfMemoryError.

2. Classes - за память минут работы программы было загружено около 2300 классов, где-то на 4 минуте показатель начал снижать.

3. Threads - стабильно было занято 16 нитей.

4. CPU - пиковая нагрузка CPU составила 42.0%.
